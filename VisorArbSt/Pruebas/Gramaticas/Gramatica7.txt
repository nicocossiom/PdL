//// Gramatica compilador Basic:
NoTerminales = { CUERPO CUERPO_SENT FUNC FUNC2 SENT DECLARACION ASIGNACION ASIGNACION2 CONDICIONAL CONDICIONAL2 CONDICIONAL3 ENTRADA ENTRADA2 SALIDA SALIDA2 PARAMETROS RESTO_PARAMETROS ID VECTOR ID2 FUNCION EXP_ENT EXP_ENT2 OP_ENT OP_ENT2 NUM EXP EXP2 EXP_REL EXP_REL2 EXP_ARIT EXP_ARIT2 OP PARAM PARAM2 PARAM3 }

Axioma = CUERPO

Terminales = { eol end input id ( ) exp print cadena dim static let = if then else def , + - entero and }

Producciones = {
	CUERPO -> CUERPO_SENT CUERPO
	CUERPO -> FUNC CUERPO
	CUERPO -> end	

	CUERPO_SENT -> SENT eol CUERPO_SENT
	CUERPO_SENT -> lambda

	SENT -> DECLARACION
	SENT -> ASIGNACION
	SENT -> CONDICIONAL
	SENT -> ENTRADA
	SENT -> SALIDA
	
	ENTRADA -> input id ENTRADA2
	ENTRADA2 -> ( EXP_ENT )
	ENTRADA2 -> lambda

	SALIDA -> print SALIDA2
	SALIDA2 -> cadena
	SALIDA2 -> EXP_ENT

	DECLARACION -> dim id ( EXP_ENT )
	DECLARACION -> static id

	ASIGNACION -> let id ASIGNACION2 = EXP_ENT
	ASIGNACION2 -> ( EXP_ENT )
	ASIGNACION2 -> lambda
	
	CONDICIONAL -> if EXP then CONDICIONAL2
	CONDICIONAL2 -> eol CUERPO_SENT CONDICIONAL3 end if
	CONDICIONAL2 -> SENT
	CONDICIONAL3 -> else eol CUERPO_SENT
	CONDICIONAL3 -> lambda

	FUNC -> def id FUNC2 eol CUERPO_SENT end def eol
	FUNC2 -> ( PARAM )
	FUNC2 -> lambda

	PARAM -> id PARAM3 PARAM2
	PARAM3 -> ( entero )
	PARAM2 -> , PARAM
	PARAM2 -> lambda
	
	ID -> id ID2

	ID2 -> VECTOR
	ID2 -> FUNCION
	ID2 -> lambda
	
	VECTOR -> ( EXP_ENT )

	FUNCION -> ( PARAMETROS )
	FUNCION -> lambda

	PARAMETROS -> EXP_ENT RESTO_PARAMETROS
	PARAMETROS -> id RESTO_PARAMETROS
	RESTO_PARAMETROS -> , PARAMETROS
	RESTO_PARAMETROS -> lambda

	EXP_ENT -> OP_ENT EXP_ENT2
	EXP_ENT2 -> + EXP_ENT
	EXP_ENT2 -> lambda

	OP_ENT -> - OP_ENT2
	OP_ENT2 -> ( EXP_ENT )
	OP_ENT2 -> NUM
	OP_ENT -> ( EXP_ENT )
	OP_ENT -> NUM

	NUM -> entero
	NUM -> ID

	EXP -> EXP_REL EXP2
	EXP2 -> and EXP
	EXP2 -> lambda

	EXP_REL -> EXP_ARIT EXP_REL2
	EXP_REL2 -> = EXP_REL
	EXP_REL2 -> lambda

	EXP_ARIT -> OP EXP_ARIT2
	EXP_ARIT2 -> + EXP_ARIT
	EXP_ARIT2 -> lambda

	OP -> - OP_ENT
	OP -> ( EXP_ENT )
	OP -> NUM
}
	
